buildscript {
    ext {
        kotlin_version = "1.9.20"
        rabbitmq_java_client_version = "5.20.0"
        junit_jupiter_version = "5.10.1"
        testcontainers_version = "1.19.2"
        httpclient_version = "5.2.1"
        rabbitmq_http_client_version = "5.2.0"
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlin_version")
        classpath("com.adarshr:gradle-test-logger-plugin:4.0.0")
        classpath("me.champeau.jmh:jmh-gradle-plugin:0.7.2")
    }
}

plugins {
    id("jacoco")
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "org.jetbrains.dokka" version "1.9.10"
    id "java-library"
    id "maven-publish"
    id "signing"
}

allprojects {
    group = "io.github.viartemev"

    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "idea"

    repositories {
        mavenCentral()
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = '1.8'
        }
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    sourceCompatibility = 1.8

    dependencies {
        implementation("io.github.microutils:kotlin-logging:3.0.5")
        implementation("com.rabbitmq:amqp-client:$rabbitmq_java_client_version")
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
        implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.7.3")
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")
        testRuntimeOnly("ch.qos.logback:logback-classic:1.4.11")
        testRuntimeOnly("ch.qos.logback:logback-core:1.4.11")
        implementation("org.slf4j:slf4j-api:2.0.9")
    }
}

configure(rootProject) {
    archivesBaseName = "rabbitmq-kotlin"
    version = "0.0.7-SNAPSHOT"

    apply plugin: "com.adarshr.test-logger"

    test {
        useJUnitPlatform()
    }

    dependencies {
        testImplementation("com.rabbitmq:http-client:$rabbitmq_http_client_version")
        testImplementation("org.springframework:spring-web:5.3.31")
        testImplementation("org.apache.httpcomponents.client5:httpclient5:$httpclient_version")
        testImplementation("org.testcontainers:testcontainers:$testcontainers_version")
        testImplementation("org.testcontainers:junit-jupiter:$testcontainers_version")
        testImplementation("org.mockito.kotlin:mockito-kotlin:4.1.0")
        testImplementation("org.mockito:mockito-inline:4.1.0")
        testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version")
        testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version")
    }
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

artifacts {
    archives javadocJar, sourcesJar
}


subprojects {
    dependencies {
        implementation rootProject
    }
}

project(":benchmarks") {
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "me.champeau.jmh"

    jmh.jmhVersion = "1.37"
    compileJmhKotlin.kotlinOptions.jvmTarget = "1.8"

    jmhJar {
        exclude 'LICENSE'
    }

    dependencies {
        implementation("org.openjdk.jmh:jmh-core:1.37")
        jmh("org.openjdk.jmh:jmh-generator-annprocess:1.37")
    }

    task deleteEmptyBmList(type: Delete) {
        delete "$buildDir/jmh-generated-classes/META-INF/BenchmarkList"
    }
    jmhCompileGeneratedClasses.finalizedBy deleteEmptyBmList
}

publishing {
    repositories {
        maven {
            name = "MavenCentral"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url = version.toString().endsWith("SNAPSHOT") ? uri(snapshotsRepoUrl) : uri(releasesRepoUrl)
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
    publications {
        maven(MavenPublication) {
            from(components["java"])
            artifact(tasks["sourcesJar"])
            artifact(tasks["javadocJar"])
            groupId = "io.github.viartemev"
            artifactId = "rabbitmq-kotlin"
            version = "0.7.0-SNAPSHOT"
            pom {
                name.set("RabbitMQ Kotlin")
                description.set("Kotlin library for RabbitMQ")
                url.set("https://github.com/viartemev/rabbitmq-kotlin")
                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://github.com/viartemev/rabbitmq-kotlin/blob/master/LICENSE")
                    }
                }
                developers {
                    developer {
                        id.set("https://github.com/viartemev")
                        name.set("Vyacheslav Artemyev")
                        email.set("viartemev@gmail.com")
                    }
                }
                scm {
                    connection.set("scm:git:https://github.com/viartemev/rabbitmq-kotlin.git")
                    developerConnection.set("scm:git:https://github.com/viartemev/rabbitmq-kotlin.git")
                    url.set("https://github.com/viartemev/rabbitmq-kotlin")
                }

            }
        }
    }
}

signing {
    required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}
